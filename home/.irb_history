@stories.first.to_h
@stories.first.hash
load 'pivotal_story.rb'
@story = PivotalStory.new @stories.first
@stories.first.css("name")
@stories.first.css("name").text
@story.author
@story.id
@story.note
@story.notes
@story.text
p = Pick.new
p.send(:branch_exists?, "test")
"hi".blank?
"hi".emtpy?
"".nil?
"" == ""
require 'cgi'
CGI::escape("current_state:unstarted story_type:feature")
{:a => "b"}.to_xml
{:a => "b"}.to_json
require 'pivotal-tracker'
require 'pivotal_tracker'
require 'rubygems'
require 'pivotaltracker'
gem 'pivotal-tracker'
require 'bundler'
b = Bundler::XMLMarkup.new
b = Bundler::XmlMarkup.new
b = Builder::XmlMarkup.new
require 'builder'
b.story
b = Builder::XmlMarkup.new {}
b.story do |story|
"created_at"
end
b.story do |s|
s.created_at("1")
b
builder = Builder::XmlMarkup.new
out = builder.story do |s|
out
returning
out = Builder::XmlMarkup.new.story { |s| s.created_at("1") }
out = Builder::XmlMarkup.new.story { |s| s.current_state("started") }
Pivotal::Api
require 'lib/pivotal/api'
require 'lib/pivotal/story'
Pivotal::Story
s = Pivotal::Story
s.class
s.type
s.methods
s.methods.sort
Story
{:one => "1", :two => "2"}
h = _
h.map
h.map { |k,v| "#{k}=#{v}" }
h.map { |k,v| "#{k}=#{v}" }.join(' ')
h.map { |k,v| "#{k}=#{v}" }.join
h.map { |k,v| "#{k}=#{v}" }.join " "
require 'lib/pivotal/collection'
a = Pivotal::Api.new :api_token => "10bfe281783e2bdc2d6592c0ea21e8d5"
a.projects
a.projects.all
a.projects.find(:all)
a.projects.find(:first)
Pivotal
require 'lib/pivotal'
require 'lib/pivotal/project'
require 'lib/pivotal/association'
a = Pivotal::Api.new     has_collection :projects
a = Pivotal::Api.new
a.public_methods(false)
require 'lib/pivotal/base'
a.projects.find
a.projects.find(:project_id => 52815)
a.projects.find(:all, :project_id => 52815)
a.projects.resource_name
a.projects.send(:resource_name)
a.projects.__send__(:resource_name)
a.projects.send(:resource_class)
a.projects.send("@resource_class")
Pivotal::Project.class.name
Pivotal::Project.name
Pivotal::Project.name.gsub(/\:/, '')
Pivotal::Project.name.gsub(/.+\:/, '')
Pivotal::Project.name.gsub(/.+\:\:/, '')
Pivotal::Project.name.gsub(/.+\:\:/, '').downcase
a.projects.find(:id => 1)
a.projects.find(:all, :id => 1)
a.projects.find(:all, :id => 52815)
p = _
p = Pivotal::Story.new
p = Pivotal::Story.new 1
p.class
p.class.name
p.class.name.gsub(/.+\:\:/, '')
p.class.name.gsub(/.+\:\:/, '').downcase
a.projects.find(:id => 52815)
p = s
p.stories
p = a.projects.find(:id => 52815)
p.stories.find
Piv
Pivotal::Base
s = p.stories.find
load 'lib/pivotal'
load 'lib/pivotal.rb'
stories = p.stories
p.stories.find :story_type => :feature
p.stories.find :id => 2265959
s.id
s = p.stories.find(:id => 2265959
s = p.stories.find(:id => 2265959)
s.created_at
s.story_type
s.name
s.description
s.notes
s.estimate
s.requested_by
p.stories.first
p = a.projects.first
a.projects.__send__("@collection_resource")
a.projects.__send__("collection_resource")
module Pivotal
class Collection
attr_accessor :collection_resource
a.projects.collection_resource
a.projects.collection_resource[]
a.projects.collection_resource[""]
a.projects.collection_resource[""].get
{}.empty?
a.projects.send(:parse_conditions, {})
xml = _
a.projects.send(:map_to_class, xml)
Nokogiri::XML(xml)
parse_tree = _
parse_tree.xpath("project")
parse_tree.xpath("\\project")
parse_tree.xpath("//project")
c = _
c.collection_resource
xml = c.collection_resource.get
c.send(:map_to_class, xml)
Pivotal::Project.xpath
Pivotal::Base.xpath
p.stories.find.first
Object.new
_.id
a.projects.find(52815)
s = p.stories.first
s = p.stories.find(:all)
s = p.stories.find(:all)      @api_url = "http://www.pivotaltracker.com/services/v2"
s = p.stories.find(2265959)
s.resource
p = a.projects.find(52815)
p.id
s.xml
s.xml.to_xml
def x(*args)
puts args.inspect
x(1,2,3)
x([1,2,3])
x(*[1,2,3])
def y(*args)
x(args)
y(1,2,3)
y(*[1,2,3])
undef x
undef y
x(*args)
agent = Mechanize.new
agent.get("http://www.forrent.com/results.php?page_type_id=refine&search_type=citystate&view_type=list&is_refined=1&seed=549301116&main_field=Atlanta%2C+GA&ssradius=-1&min_price=%240&max_price=No+Limit&sbeds=Any&sbaths=Any")
paginator = page.search("//div[@id='paginator']").first
paginator = agent.page.search("//div[@id='paginator']").first
paginator
paginator.children
paginator.children.size
paginator.children.last.class
paginator.children.last
paginator.children.first
paginator.children[1]
paginator.children.select { |node| node.name == "form" }
paginator_forms = paginator.children.select { |node| node.name == "form" }
paginator_forms.first
paginator_forms.select { |form| form.at_css("input[name='page2']") }
paginator_forms.select { |form| form.at_css("input[id='page2']") }
paginator_forms.select { |form| form.at_css("#page2") }
paginator_forms.detect { |form| form.at_css("#page2") }
_.submit
mf = Mechanize::Form.new paginator_forms.detect { |form| form.at_css("#page2") }
mf.submit
page
agent
agent.page
page = _
page.mech
Page.new
url = "http://google.com"
Page.new(url)
Page.new(url, :with => :nokogiri)
Page.new(url, :with => :nokogiri).page
Page.new(url).page
Page.new(url, :with => :mechanize).page
Page.new(url, :with => :json).page
Page.parse(url, :with => :nokogiri)
Page.parse(url, :with => :source)
Page.parse(url, :with => :mechanize)
Scraper::Page("http://google.com")
Scraper::Page("http://google.com", :with => :nokogiri)
Page::Parse("http://google.com", :with => :source)
Page::Parse("http://search.yahooapis.com/ImageSearchService/V1/imageSearch?appid=YahooDemo&query=Madonna&output=json", :with => :source)
Page::Parse("http://search.yahooapis.com/ImageSearchService/V1/imageSearch?appid=YahooDemo&query=Madonna&output=json", :with => :json)
Page::Parse("http://search.yahooapis.com/ImageSearchService/V1/imageSearch?appid=YahooDemo&query=Madonna&output=json", :with => :json, :proxy => { :address => "http://127.0.0.1", :port => "80")
}
Page::Parse("http://search.yahooapis.com/ImageSearchService/V1/imageSearch?appid=YahooDemo&query=Madonna&output=json", :with => :json, :proxy => { :address => "http://127.0.0.1", :port => "80" })
puts (1..100).map { |n| [:fizzbuzz][n%15] || [:fizz][n%3] || [:buzz][n%5] || n }
valid = false
true if valid
require 'redis'
r = Redis.new
r["key"] = 1
r.type("key")
r.lpush "list", "list element"
r["list"
]
r["list"]
r.lrange("list")
r.lrange("list", 0, 1)
r.lrange("list", 0, 0)
r.lrange("list", 0, -1)
r.lpush "list", "another list element"
r.rpush "list", "rpush list element!"
r.set_add "set", "one"
r.set_add "set", "two"
(1..5).to_a
(1..5).to_a.zip((a..e))
(1..5).to_a.zip(("a".."e"))
(1..5).to_a.zip(("a".."e").to_a)
Hash[*((1..5).to_a.zip(("a".."e").to_a))]
Hash[*((1..5).to_a.zip(("a".."e").to_a).flatten)]
ls
`ls`
x = []
x << []
x[0]
x[0] = [1,2,3]
x[1] = [3,2,1]
x.map(&:join, "\t")
x.map(&:join("\t"))
x.map { |row| row.join("\t") }.join("\n")
puts _
x.map { |row| row.join("\t") }.join("\n\n")
x.map { |row| row.join(" ") }.join("\n")
"abc".length
class Tester
attr_accessor :value
def initialize(value)
@value = value
testers = [] << Tester.new(1) << Tester.new(2) << Tester.new(3)
testers.detect { |tester| tester.value == 2 }
testers.index(_)
index = testers.detect { |tester| tester.value == 2 }
index = testers.index(index)
testers[index..-1]
testers[index+1..-1]
1.sign
Kernel.ran
Kernel.rand
Array.new([], 10)
Array.new(10, [])
Array.new(10, Array.new(10, []))
Array.new(10, Array.new(10, ""))
"abc".each { |l| puts l }
"abc".each_char { |l| puts l }
"abc".each_char_with_index { |l| puts l }
"abc".chars
"abc".chars.each_with_index
"abc".chars.each_with_index { |l, i| puts l,i }
x[1,2]
x[1][2]
x = Array.new(10, Array.new(10, ""))
x[2][4]
x[2][4] = "h"
x[3][4] = "i"
"abc".first
"abc".chars.first
97.to_char
char(97)
Char(9(
)7)
Char
97.to_s
word = "alpha"
chars = word.chars
initial = [Object.new, chars.first]
cells = chars.inject(initial) do |acc, char|
puts acc, char
nil
cells = chars.inject(initial) { |acc, char| puts acc.inpect }
cells = chars.inject(initial) { |acc, char| puts acc.inspect }
%w(abc defg hijkl)
_.map(&:length).max
"epsilon".length
7.1.25
7*1.25
7*1.25.ceil
(7*1.25).ceil
Array.new(10) { |i| i }
require 'term'
puts "&#12353;"
puts "\12353"
puts "\123\53"
puts "\#12353"
puts "\3041"
puts "\3050"
require 'jcode
require 'jcode'
$KCODE
$KCODE = "U"
puts "\3060"
puts "hi"
$KCODE = "u"
"alalalalalalalalalalalalalalalal"
""""""
require 'readline'
"\123".."\130".to_a.each { |x| p x }
"\123".."\129".to_a.each { |x| p x }
"\97".."\107".to_a.each { |x| p x }
("\97".."\107").to_a.each { |x| p x }
"a".."z"
"a".."c".to_a
("a".."c").to_a
("\97".."\99").to_a
("\97".."\99").to_a.each { |x| puts x }
("\97".."\107").to_a.each { |x| puts x }
("\101".."\107").to_a.each { |x| puts x }
puts "\100"
puts "\99"
puts "\101"
puts "\30\40"
puts "\30\60"
puts "\30\61"
puts "\3061"
puts "\306\1"
puts
puts "U+3050"
puts "\U+3050"
puts u"\3050"
puts u'\3050'
puts '0x3050'
puts "0x3050"
puts "\0x3050"
puts "\u3050"
puts "\u{3050}"
puts "\u{a5}"
puts \u{a5}
puts ""
puts "\302\202\182"
puts "\302\202\382"
puts "\302\202"
puts "\332\202"
puts "\304\202"
puts "\388\202"
puts "\323\202"
puts "\343\202"
puts "\340\202"
puts "\330\202"
puts "\331\202"
puts "\30\250"
puts "\30\50"
puts "\2A\50"
puts "\2E\50"
puts "\30\51"
puts "\330\51"
puts "\230\51"
puts "\230\251"
puts "\330\251"
puts "\330\250"
puts "\330\351"
puts "\330\350"
`ruby -v
`
Tester.methods.sort
t = Tester.new
t.methods.sort
def throttle
`ruby -v`
require 'open-uri'
uri = URI.parse("http://mchild:pr1m3d1a@66.38.243.104:9095")
uri.host
uri.username
uri.user
uri.password
uri.port
uri.to_s
open("http://www.google.com", :proxy => uri)
open("http://www.google.com", :proxy => "http://66.38.243.104:9095", "Authorization" => "Basic " << Base64.encode64("mchild:pr1m3d1a")) do |page|
puts page.read
require 'base64'
open("http://www.google.com", :proxy => "http://66.38.243.104:9095", "Authorization" => "Basic " << Base64.encode64("mchild:pr1m3d1a")) { |page| puts page.read }
require 'curb'
c = Curb::Easy.new("http://www.google.com")
c = Curl::Easy.new("http://www.google.com")
c.perform
puts c.body_str
c.proxy_url = "http://66.38.243.104"
c.proxy_port = "9095"
c.proxy_port = 9095
c.proxypwd = "mchild:pr1m3d1a"
c.body_str
c.proxy_auth_types
c.proxy_port
c.proxy_url
c.proxy_type
c.proxy_type = Curl::CURLPROXY_HTTP
c.proxy_tunnel?
c.proxy_tunnel = true
c.proxy_auth_types = Curl::CURLAUTH_ANY
source = `curl -s -x 66.38.243.104:9095 -U mchild:pr1m3d1a http://www.rentwiki.com`
noko = Nokogiri::HTML(source)
puts noko.inspect
puts noko.url
"abc".index("b")
"abc".index("d")
[[1,:c],[3,:d],[2,:c]].sort { |v, s| v }
[[1,:c],[3,:d],[2,:c]].sort { |a, b| a.first <=> b.first }
[[1,:c],[3,:d],[2,:c]].sort { |a, b| a.first <=> b.first }.map { |x| x.last }
%w{echo foo}
%x{echo foo}
%x{cat nofile}
`cat nofile`
system "cat nofile"
x = `cat nofile`
x
x = %x{cat nofile}
$?.exitstatus
foo = "foo"
result = %x{echo #{foo}}
foo = "bar"
result
"abc" == true
"abc" =! true
"abc" != true
["abc", true].select { |x| x != true }
"abc".first =~ /abc/
r.set_add 'foo', 'alpha'
r.set_add 'bar', 'alpha'
r.sinterstore 'result', 'foo', 'bar'
r.set_members 'result'
r.flush_all
r.set_add 'users:emails', 'test@test.com'
r.set_add 'users:emails', 'test@example.com'
r.set_add 'users:emails', 'demo@place.com'
r.set_members 'users:emails'
r.sinterstore 'result', 'demo@place.com'
r.inter 'users:email', 'foo'
r.intersection 'users:email', 'foo'
r.sinter 'users:email', 'foo'
r.sinter 'users:email', 'test@example.com'
r.set_add 'users:search', 'test@examkple.com'
r.sinter 'users:email', 'users:search'
r.srem 'users:search'
r.delete 'users:searc'
r.delete 'users:search'
r.del 'users:search'
r['users:search'] = 'test@example.com'
r.sinterstore 'result', 'users:email', 'users:search'
r["result"]
r.set_members "result"
r.keys '*'
r.keys "*"
r.del "users:search"
r.set_add 'search', 'test@example.com'
r.set_add "search", "test@example.com"
r.set_members "users:emails"
r.set_add "users:email", "demo@place.com"
r.key '*'
r.set_members "users:email"
r.set_add "users:email", "demo@example.com"
r["search"] = "demo@example.com"
r.sinter "users:email", "search"
r.del "search"
r.set_add "search", "demo@example.com"
r.sinterstore "result", "users:email", "search"
r.type "result"
nil.length
nil.size
nil.count
"abc" =~ /d/ || /b/
"abc" =~ /d/
"abc" =~ /b/
"abc" =~ /d/ || /c/
"abc" =~ /d/ || /a/
"abc" =~ /d/ || /d/
"abc" =~ /d/ || /e/
"abc" =~ /d/ || "abc" =~ /e/
"abc" =~ /d/ || "abc" =~ /c/
"foobar" =~ /foo(bar)?/
$1
"foobarbar" =~ /foo(bar)?/
"Georgia" =~ /[A-Z][a-z]+/
ALPHA = /[A-Za-z]+/
"abCD" =~ /#{ALPHA}/
"abCD"[/#{ALPHA}/]
$&
UPPER_OR_LOWER = /[A-Z-]+|[a-z-]+/
CHANNEL    = /apartments|college|military|senior/
re = %r{^/(#{CHANNEL})/(#{UPPER_OR_LOWER})/(#{UPPER_OR_LOWER})/?(.*)?$}
"/apartments/georgia/Atlanta"[re]
"/apartments/georgia/Atlanta".match(re)
m = _
m[0]
m[1]
m[2]
m[3]
PROPER = /((?:[A-Z][a-z]+-?)+)/
re = %r{^/(#{CHANNEL})/(#{UPPER_OR_LOWER})/(#{UPPER_OR_LOWER}|#{PROPER})/?(.*)?$}
re = %r{^/(#{CHANNEL})/(#{UPPER_OR_LOWER})/(#{PROPER}|#{UPPER_OR_LOWER})/?(.*)?$}
m[4]
PROPER = /(?:[A-Z][a-z]+-?)+/
"/apartments/georgia/atlanta".match(re)
"/apartments/Georgia/atlanta".match(re)
re = %r{^/(#{CHANNEL})/(#{PROPER}|#{UPPER_OR_LOWER})/(#{PROPER}|#{UPPER_OR_LOWER})/?(.*)?$}
[1,2,3]
x = _
y = [a,b,c]
y = %w(a b c)
x.zip(y)
y.zip(x)
@twitter
@twitter.instance_variable_get(:@client)
@twitter.insert
n
p @twitter
pp @twitter
pp @twitter.instance_variable_get(:@client)

"".methods.sort
" abc ".compact
" abc ".chomp
" abc ".squeeze
" abc ".strip
" abc ".strip!
" abc ".strip!.strip!
"(P); [] /(n) (1) dog (Canis (lupus) familiaris)/(2) snoop (i.e. a detective, a spy, etc.)/(n-pref) (3) counterfeit/inferior/useless/wasteful/(P)/
 /(n) andiron/dog/locking dog/
"
[1,2,3].pop
[1,2,3].shift
x = [1,2,3]
x.shift
x.sort!
x.sort! { |x, y| x <=> y }
"abc".characters
"abc".chars.all? 
require 'word_search/character_maps'
CharacterMaps.translate("doggie")
CharacterMaps.translate("doggie", CharacterMaps.hiragana)
require 'word_search/character'
Hash[[]]
Hash[*[]]
Hash[*[].flatten]
Hash[*[1,2,3].flatten]
"".start_with?("x")
"x".start_with?("x")
ruby -e "puts Datetime.now.to_s"
Datetime.now
Datetime
Time.now.to_s
Date.today
Date.now
require 'jsize'
"".jsize
"a".jsize
"abc".matches?("a")
"abc".match?("a")
"abc".matches("a")
"abc".match("a")
"abc".match("d")
"abc"["d"]
"abc"["c"]
YAML
require 'yaml'
YAML.load_file('config/word_list.yml')
YAML.load('config/word_list.yml')
' abc '.trim
' abc '.strip
{:a => 1}.merge({:a => 2})
File
File.directory?
File.directory?('tmp')
File.directory?('./tmp')
__FILE__
"abc".try(:first)
require 'activesupport'
require 'net/http'
Net::HTTP.start('http://www.leads.ci.primedia.com', '80') { |http| req = Net::HTTP.const_get('GET').new('/v1/leads/new/', {})
http.request(req) }
Net::HTTP.start('http://leads.ci.primedia.com', '80') { |http| req = Net::HTTP.const_get('GET').new('/v1/leads/new/', {}); http.request(req) }
uri = URI.parse('http://leads.ci.primedia.com/v1/leads/new/'); Net::HTTP.start('http://leads.ci.primedia.com', '80') { |http| req = Net::HTTP.const_get('GET').new('/v1/leads/new/', {}); http.request(req) }
uri = URI.parse('http://leads.ci.primedia.com/v1/leads/new/'); Net::HTTP.start(uri.host, uri.port) { |http| req = Net::HTTP.const_get('GET').new(uri.path, {}); http.request(req) }
'GET'.capitalize
uri = URI.parse('http://leads.ci.primedia.com/v1/leads/new/'); Net::HTTP.start(uri.host, uri.port) { |http| req = Net::HTTP.const_get('Get').new(uri.path, {}); http.request(req) }
uri = URI.parse('http://leads.ci.primedia.com/v1/leads/new'); Net::HTTP.start(uri.host, uri.port) { |http| req = Net::HTTP.const_get('Get').new(uri.path, {}); http.request(req) }
res = _
res.body
res.body.length
require 'rack'
Rack::Utils::HeaderHash.new(res.to_hash)
_['content-length']
res.to_hash
Rack::Utils::HeaderHash.new(res.to_hash)['Content-Length']
Rack::Utils::HeaderHash.new(res.to_hash)[:Content-Length]
Rack::Utils::HeaderHash.new(res.to_hash)[:ContentLength]
Rack::Utils::HeaderHash.new(res.to_hash)['CONTENT-LENGTH']
Rack::Utils::HeaderHash.new(res.to_hash)[:'CONTENT-LENGTH']
res.code
puts res.body
uri = URI.parse('http://leads.ci.primedia.com/v1/leads/new'); res = Net::HTTP.start(uri.host, uri.port) { |http| req = Net::HTTP.const_get('Get').new(uri.path, {}); http.request(req) }
res
uri = URI.parse('http://leads.ci.primedia.com/v1/leads/new'); res = Net::HTTP.start(uri.host, uri.port) { |http| req = Net::HTTP.const_get('Get').new(uri.path, {}); http.request(req) }; puts res.body
URI.parse("http://local.apartmentguide.com").host
URI.host
URI.host=
asdlkfj
URI.host="abc"
URI.parse("/v1/leads/new")
uri = _
uri.host="http://local.apartmentguide.com")
uri.host="http://local.apartmentguide.com"
uri.host="local.apartmentguide.com"
open("http://leads.ci.primedia.com/v1/leads/new").read
YAML.load_file('data/data.yml')
_
_.to_s
Date.new
DateTime
DateTime.new
Time.new
d = _
d.to_s
d.to_s("%Y")
d.stftime("%Y")
d.strftime("%y")
d.strftime("%Y")
d.strftime("%m %Y")
d.strftime("%M %Y")
d.strftime("%b %Y")
d.strftime("%d %b %Y")
d1 = Date.new
d2 = Date.new
d2 == d1
d1 + 1
d1.to_s
Date.today.to_s
(Date.today + 1).to_s
Time.now
_.zone
Time.zone_offset("UTC")
Time.zone_offset("EDT")
Time.zone_offset("JPT")
Time.zone_offset("JTC")
Time.zone_offset("JTC)
Time.zone_offset("JTC))
Date.parse
Date.at
params => { :day => "20100501" }
params = { :day => "20100501" }
Date.new(params[:day][0..3], params[:day][4..5], params[:day][6..7])
Date
Date.new(2010)
Date.new(params[:day][0..3].to_i, params[:day][4..5].to_i, params[:day][6..7].to_i)
Date.new(_)
Date.parse("2010-05-01
")
Date.parse("20100501")
Date.parse("20100503")
_.strftime("%d %b %Y")
@date = Date.parse("20100503")
@data = YAML.load_file('data/data.yml')
@data[@date]
@data[@date]["1"]
@data[@date][1]
@data[@date][0]
Date.zone_offset("JST")
Date.offset_zone("JST")
Date.zone("JST")
require 'tzinfo'
tz = TZInfo::Timezone.get("JST")
tz = TZInfo::Timezone.get("Tokyo")
tz = TZInfo::Timezone.get("Japan")
date = tz.utc_to_local(Time.utc(2010, 05, 01))
tz.now
tz.now.to_date
tz.now.date
tz.now.class
Date.parse(tz.now.strftime('%Y/%m/%d'))
Builer
Builder
Builder::XmlMarkup
Builder::Xml.new
$KCODE='U'
require 'jline'
" [] /(n,adj-no) (1) sizes (various)/large and small/(2) daisho (matched pair of long and short swords)/(3) large and small drums/(4) long months and short months/(P)/"
puts " [] /(n,adj-no) (1) sizes (various)/large and small/(2) daisho (matched pair of long and short swords)/(3) large and small drums/(4) long months and short months/(P)/"
text = "/(n,adj-no) (1) sizes (various)/large and small/(2) daisho (matched pair of long and short swords)/(3) large and small drums/(4) long months and short months/(P)/"
text.match(%r</\([^P]+?\) >)
text.match(%r</\([^P]+?\) >g)
text.match(%r</\([^P]+?\) >u)
ri
ri Regexp
ri Regexp.match
ri Regexpmatch
ri Regexp#match
ri String#match
ri String
ri ri
ri 'String#match'
ri 'String.match'
ri "".match
ri split
ri 'split'
ri 'String#split'
"/(a) Def 1/(2) Def 2/(3) Def 3/"
text = _
text.split( %r</> )
text.split( %r</(?:\(\d\))> )
DateTime.at("May 14, 3:55 PM JST")
DateTime.parse("May 14, 3:55 PM JST")
Time.parse("May 14, 3:55 PM JST")
t = _
t.zone
t.zone = "EST"
t.localtime
t.utc_offset
vi
mate
_ + 15
rand
rand(0.5)
rand(1)
(Kernel.rand / 2) + 0.25
30.base(2)
30.to_s(2)
30.to_s(2).lpad(3)
30.to_s(2).left_pad(3)
30.to_s(2).pad
30.to_s(2).rjust(8, '0')
%w[111 110 101 100 011 010 001 000].zip(rule.chars)
rule = 30.to_s(2).rjust(8, '0')
%w[111 110 101 100 011 010 001 000].zip(rule)
%w[111 110 101 100 011 010 001 000].zip(rule.chars.to_a)
"111111".in_groups(3)
"111111".chars.to_a.in_groups(3)
"111111".chars.to_a.in_groups_of(3)
"111111".chars.each_cons(3)
"111111".chars.each_cons(3) { |x| p x }
"111111".chars.each_cons(3) { |x| p x.join }
"111111".chars.each_cons(3).map
"111111".chars.each_cons(3).map { |x| x.join }
Hash(*%w[111 110 101 100 011 010 001 000].zip(rule.chars.to_a).flatten)
Hash.new(*%w[111 110 101 100 011 010 001 000].zip(rule.chars.to_a).flatten)
"1".center(9, '0')
_.tr('01', 'X')
"111".to_i
"111".to_i(2)
a = [%w[1 0 1], %w[0 1 0], %w[1 0 1]]
a[1][1]
a[-1, 1][-1, 1]
a = [%w[1 0 1 0 1], %w[0 1 0 1 0], %w[1 0 1 0 1], %w[0 1 0 1 0], %w[1 0 1 0 1]]
a[-1, 1]
a[-1..1]
a[-1,1]
a[1]
a[1,2]
a[-1,2]
a[1,-1]
a[2, -1]
a[-1, 2]
a.slice(1, 2)
a.slice(-1, 2)
a.slice(1, 2).slice(1,2)
a.slice(1, 2).map { |x| x.slice(1,2)
a.slice(1, 2).map { |x| x.slice(1,2) }
a.slice(1, 2).map { |x| x.slice(1,2) }.flatten
_.select { |x| x == "1" }
[1,2,3].*
[1,2,3].product
[1,2,3].inject(1) { |x, m| x *= m }
[1,2,3].inject(1, &:*)
[1,2,3]*[4,5,6]
[1,2,3].multiply [4,5,6]
MultiDimensionalArray.new(3,3)
3.downto
a = _
a.dimensions
a.dimensions.length
*[1,2].length
[1,2].length
a = MultiDimensionalArray.new(3,3)
[1,2,3].zip([4,5,6])
[1,2,3].zip([4,5,6]).map { |p| p[0]*p[1] }
[1,2,3].zip([4,5,6]).map { |p| p[0]*p[1] }.inject(1, &:*)
[1,2,3].zip([4,5,6]).map { |p| p[0]*p[1] }.inject(1, &:+)
[1,2].zip([3,4]).map { |p| p[0]*p[1] }.inject(1, &:+)
a[1,2]="X"
a
-1 % 8
textmate
r = Tester.new(3)
r.update { |t| t.value = 5 }
r
class 2d
class 2D
rand(2)
ca
@ca
    @ca = TwoDimensional::CellularAutomata.new(
      :seed => TwoDimensional::Schemes::Life.random_seed(@size),
      :rule => TwoDimensional::Schemes::Life.rules
      )
@size = 20
@ca.states.first
@ca.current_state
@ca.current_state[2,2]
@ca.current_state[10,10]
@ca.current_state[10,10].neighbors
_.length
@ca.current_state[10,10].neighbors.map(&:value)
@ca.current_state.to_s
@ca.current_state[0,0].neighbors.map(&:value)
@size = 10
      :rule => TwoDimensional::Schemes::Life.rules)
ma = MultiDimensionalArray.new(3,3)
ma[2,2] = 1
ma[0,2] = 1
ma.to_s
ma.data
ma[2,2]
ma[0,2]
ma[1,0] = 1
x = y = 1
y
ma[x - 1, y - 1]
ma.data = [1, 2, 3, 4, 5, 6, 7, 8, 9]
ma[x , y - 1]
ma[x + 1, y - 1]
require 'nokogiri'
Nokogiri::HTML("<fb:like />")
_.to_html
Nokogiri::XML("<fb:like />")
_.to_xml
x = if 1 + 1 < 3; :alpha; end
TwoDimensional::Schemes::Life.rules
conway = _
TwoDimensional::Schemes::Life.random_seed
seed = _
seed.grid
CGI::unescape("%7C")
html = "<html><head></head><body><h1>HI THERE</h1></body></html>
html = "<html><head></head><body><h1>HI THERE</h1></body></html>"
n = Nokogiri::HTML(html)
n.css("body")
n.at_css("body")
body = _
body << "<fb:like />"
n.at("body")
body.cdata
body.text
body.to_html
fb = Nokogiri::HTML.fragment("<fb:like />")
fb.to_s
body << fb
body
body.to_s
body = n.at("body")
n.to_html
n.to_s
n.to_xml
body.inner_html(fb)
body.inner_html = fb
fb
n.to
n.to+s
html = "<html><body><fb:like /></body></html>"
n = Nokogiri::HTML(html, nil, nil, 0)
n = Nokogiri::HTML(html, nil, nil, 1)
n = Nokogiri::HTML(html, nil, nil, 1).to_s
(1..15).map { |x| 1 << x }
(1..15).map { |x| 1 << x }.push(0)
(1..15).map { |x| 1 << x }.shift(0)
(1..15).map { |x| 1 << x }.unshift(0)
constants = _
constants.each { |c| Nokogiri::HTML(html, nil, nil, c).to_s }
constants.each { |c| puts Nokogiri::HTML(html, nil, nil, c).to_s }
a = 3
steps = 2
(a - steps) ... (a + steps)
(a - steps) ... (a + steps).each { |x| puts x }
((a - steps) ... (a + steps)).each { |x| puts x }
((a - steps) .. (a + steps)).each { |x| puts x }
(a - steps .. a + steps).each { |x| puts x }
html = "<html><head><meta property="og:blah" content="foo" /></head</html>"
html = '<html><head><meta property="og:blah" content="foo" /></head</html>'
"abc".tap { |s| puts s }
"abc".tap { |s| s.upcase }
"abc".tap { |s| puts s.upcase }
class Generic::Cell; Alive = 1; Dead = 0; end
Generic::State.new(4,4,4)
gs = _
 gs.grid.data = Array.new(64, 1)
gs
gs[2,2,2]
gs[3,3,3]
gs[4,4,4]
class Generic::Cell; Alive = 1; Dead = 0; def initialize(value); @value = value; end def value; @value; end; end
class Generic::Cell; Alive = 1; Dead = 0; def initialize(value); @value = value; end; def value; @value; end; end
gs.neighbor_count(Generic::Cell.new(1, gs, 2, 2, 2)
)
gs = Generic::State.new(4,4,4)
gs.neighbor_count(Generic::Cell.new(1, gs, 2, 2, 2))
(1..10).each { |i| next if i < 8; puts i }
(1..10).each { |i| (1..5).each { |j| next if i < j }; puts i }
(1..10).each { |i| (1..5).each { |j| next if j < i }; puts i }
(1..10).each { |i| (1..5).each { |j| next if j < j }; puts i }
(1..10).each { |i| (1..5).each { |j| return if j < j }; puts i }
gs.neighbor_count(Generic::Cell.new(1, gs, 2, 2, 2), :include_self => true)
gs.neighbor_count(Generic::Cell.new(1, gs, 2, 2, 2), :include_self => true, :steps => 2)
gs.neighbor_count(Generic::Cell.new(1, gs, 2, 2, 2),  :steps => 2)
ThreeDimensional::Schemes::Life.game_of_life(:size => 5)
ca = _
ca.permute
ca.permute!
ca.permute(1)
ca = ThreeDimensional::Schemes::Life.game_of_life(:size => 5)
ca.permute!~
~
ca.to_s
puts ca.to_s
ca = ThreeDimensional::Schemes::Life.game_of_life(:size => 5, :starved => 5, :overcrowded => 12)
ca.run!(3)
ca.run!(5)
ca = ThreeDimensional::Schemes::Life.game_of_life(:size => 10, :starved => 5, :overcrowded => 12)
require 'uri'
URI.parse("http://site.com?a=b&c=d")
u = _
CGI.parse(u.query)
